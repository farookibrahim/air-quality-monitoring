{"version":3,"sources":["utils.js","components/Table.js","components/Chart.js","App.js","reportWebVitals.js","index.js"],"names":["splitDecimal","numStr","parts","split","beforeDecimal","afterDecimal","limitToScale","scale","fixedDecimalScale","str","filler","i","formatDecimalNumber","num","decimalScale","toString","hasDecimalSeparator","indexOf","getCategory","aqi","slug","label","getColorCode","severe","poor","moderate","satisfactory","good","Table","props","values","className","map","value","category","colorCode","classNames","city","style","color","fromNow","updated","getChartValues","filter","obj","Chart","chartValues","chartID","series","name","data","options","theme","mode","chart","id","type","height","background","fontFamily","toolbar","show","plotOptions","bar","horizontal","columnWidth","endingShape","dataLabels","enabled","stroke","width","colors","xaxis","categories","yaxis","min","max","tickAmount","forceNiceScale","decimalsInFloat","title","text","fill","opacity","tooltip","custom","seriesIndex","dataPointIndex","w","content","globals","labels","order","display","backgroundColor","seriesNames","renderToString","useEffect","newChartValues","newSeriesArr","ApexCharts","exec","newOptions","socket","WebSocket","onopen","console","log","App","useState","setValues","onmessage","msgEvent","JSON","parse","Date","length","prevValues","newValArr","forEach","index","findIndex","push","role","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee559c3a.chunk.js","sourcesContent":["/**\n * Spilt a float number into different parts beforeDecimal, afterDecimal\n */\nexport function splitDecimal(numStr) {\n  const parts = numStr.split(\".\");\n  const beforeDecimal = parts[0];\n  const afterDecimal = parts[1] || \"\";\n\n  return {\n    beforeDecimal,\n    afterDecimal,\n  };\n}\n\n/**\n * Limit decimal numbers to given scale\n */\nexport function limitToScale(numStr, scale, fixedDecimalScale) {\n  let str = \"\";\n  const filler = fixedDecimalScale ? \"0\" : \"\";\n  for (let i = 0; i <= scale - 1; i++) {\n    str += numStr[i] || filler;\n  }\n  return str;\n}\n\n/**\n * Format Decimal Number\n */\nexport function formatDecimalNumber(\n  num,\n  decimalScale = 2,\n  fixedDecimalScale = false\n) {\n  const numStr = num.toString();\n  const hasDecimalSeparator =\n    numStr.indexOf(\".\") !== -1 || (decimalScale && fixedDecimalScale);\n  let { beforeDecimal, afterDecimal } = splitDecimal(numStr);\n  afterDecimal = limitToScale(afterDecimal, decimalScale, fixedDecimalScale);\n  return beforeDecimal + (hasDecimalSeparator ? \".\" : \"\") + afterDecimal;\n}\n\n/**\n * Get Category\n */\nexport function getCategory(aqi) {\n  if (aqi > 400 && aqi <= 500) {\n    return { slug: \"severe\", label: \"Severe\" };\n  } else if (aqi > 300 && aqi <= 400) {\n    return { slug: \"very-poor\", label: \"Very Poor\" };\n  } else if (aqi > 200 && aqi <= 300) {\n    return { slug: \"poor\", label: \"Poor\" };\n  } else if (aqi > 100 && aqi <= 200) {\n    return { slug: \"moderate\", label: \"Moderate\" };\n  } else if (aqi > 50 && aqi <= 100) {\n    return { slug: \"satisfactory\", label: \"Satisfactory\" };\n  }\n\n  return { slug: \"good\", label: \"Good\" };\n}\n\n/**\n * Get Color Code\n */\nexport function getColorCode(aqi) {\n  const colorCode = {\n    severe: \"#8a0001\",\n    \"very-poor\": \"#ed1421\",\n    poor: \"#f49717\",\n    moderate: \"#fef100\",\n    satisfactory: \"#8dca78\",\n    good: \"#018c3f\",\n  };\n  const category = getCategory(aqi);\n  return colorCode[category.slug];\n}\n","import PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport Moment from \"react-moment\";\n\nimport { formatDecimalNumber, getCategory, getColorCode } from \"../utils\";\n\nfunction Table(props) {\n  const { values } = props;\n\n  return (\n    <div className=\"row\">\n      <div className=\"col col-xl-10 mx-xl-auto mb-4\">\n        <table className=\"table table-dark table-striped table-hover\">\n          <thead>\n            <tr>\n              <th>City</th>\n              <th>Current AQI</th>\n              <th>Last updated</th>\n            </tr>\n          </thead>\n          <tbody>\n            {values.map((value, i) => {\n              const category = getCategory(value.aqi);\n              const colorCode = getColorCode(value.aqi);\n              return (\n                <tr\n                  className={classNames({\n                    [`category-${category.slug}`]: true,\n                  })}\n                  key={i}\n                >\n                  <td>\n                    <span>{value.city}</span>\n                  </td>\n                  <td>\n                    <span style={{ color: colorCode }}>\n                      {formatDecimalNumber(value.aqi)}\n                    </span>\n                  </td>\n                  <td>\n                    <Moment fromNow>{value.updated}</Moment>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nTable.propTypes = {\n  values: PropTypes.array.isRequired,\n};\n\nexport default Table;\n","import React, { useEffect } from \"react\";\nimport { renderToString } from \"react-dom/server\";\nimport PropTypes from \"prop-types\";\nimport ApexCharts from \"apexcharts\";\nimport ReactApexChart from \"react-apexcharts\";\nimport Moment from \"react-moment\";\n\nimport { formatDecimalNumber, getCategory, getColorCode } from \"../utils\";\n\nconst getChartValues = (values) => {\n  const city = values\n    .filter((obj) => typeof obj.city !== \"undefined\")\n    .map((obj) => obj.city);\n  const aqi = values\n    .filter((obj) => typeof obj.aqi !== \"undefined\")\n    .map((obj) => obj.aqi);\n  const updated = values\n    .filter((obj) => typeof obj.updated !== \"undefined\")\n    .map((obj) => obj.updated);\n  return { city, aqi, updated };\n};\n\nfunction Chart(props) {\n  const chartValues = getChartValues(props.values);\n  const chartID = \"chart-aqi-differences\";\n  const chartTitleyaxis = \"AQI\";\n  const series = [\n    {\n      name: chartTitleyaxis,\n      data: chartValues.aqi,\n    },\n  ];\n\n  const options = {\n    theme: {\n      mode: \"dark\",\n    },\n    chart: {\n      id: chartID,\n      type: \"bar\",\n      height: 350,\n      background: \"#212529\",\n      fontFamily: \"Roboto, sans-serif\",\n      toolbar: {\n        show: false,\n      },\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        columnWidth: \"55%\",\n        endingShape: \"rounded\",\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      show: true,\n      width: 2,\n      colors: [\"transparent\"],\n    },\n    xaxis: {\n      categories: chartValues.city,\n    },\n    yaxis: {\n      min: 0,\n      max: 500,\n      tickAmount: 6,\n      forceNiceScale: true,\n      decimalsInFloat: 0,\n      title: {\n        text: chartTitleyaxis,\n      },\n    },\n    fill: {\n      opacity: 1,\n    },\n    colors: [\n      ({ value }) => {\n        return getColorCode(value);\n      },\n    ],\n    tooltip: {\n      custom: ({ series, seriesIndex, dataPointIndex, w }) => {\n        const category = getCategory(series[seriesIndex][dataPointIndex]);\n        const colorCode = getColorCode(series[seriesIndex][dataPointIndex]);\n        const content = (\n          <>\n            <div className=\"apexcharts-tooltip-title\">\n              {w.globals.labels[dataPointIndex]}\n            </div>\n            <div\n              className=\"apexcharts-tooltip-series-group apexcharts-active\"\n              style={{ order: 1, display: \"flex\" }}\n            >\n              <span\n                className=\"apexcharts-tooltip-marker\"\n                style={{ backgroundColor: colorCode }}\n              ></span>\n              <div className=\"apexcharts-tooltip-text\">\n                <div>\n                  <span>\n                    {formatDecimalNumber(series[seriesIndex][dataPointIndex])}{\" \"}\n                    {w.globals.seriesNames[seriesIndex]}\n                  </span>\n                  <span className=\"mx-1\">&bull;</span>\n                  <span>{category.label}</span>\n                </div>\n                <div>\n                  <span>Updated </span>\n                  <Moment fromNow>{chartValues.updated[dataPointIndex]}</Moment>\n                </div>\n              </div>\n            </div>\n          </>\n        );\n        return renderToString(content);\n      },\n    },\n  };\n\n  useEffect(() => {\n    const newChartValues = getChartValues(props.values);\n\n    let newSeriesArr = [...series];\n    newSeriesArr[0].data = newChartValues.aqi;\n    ApexCharts.exec(chartID, \"updateSeries\", [...newSeriesArr], true);\n\n    let newOptions = { ...options };\n    newOptions.xaxis.categories = newChartValues.city;\n    ApexCharts.exec(chartID, \"updateOptions\", { ...newOptions }, false, true);\n  }, [props]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div id=\"chart\">\n      <div className=\"row\">\n        <div className=\"col col-xl-10 mx-xl-auto\">\n          <h3 className=\"text-center mb-3\">Comparison Chart</h3>\n          <ReactApexChart\n            options={options}\n            series={[...series]}\n            type=\"bar\"\n            height={350}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nChart.propTypes = {\n  values: PropTypes.array.isRequired,\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport { findIndex } from \"lodash\";\n\nimport Table from \"./components/Table\";\nimport Chart from \"./components/Chart\";\n\nconst socket = new WebSocket(\"wss://city-ws.herokuapp.com\");\n\nsocket.onopen = () => {\n  console.log(\"WebSocket Client Connected\");\n};\n\nfunction App() {\n  const [values, setValues] = useState([]);\n\n  useEffect(() => {\n    socket.onmessage = (msgEvent) => {\n      const data = JSON.parse(msgEvent.data);\n      const updated = new Date();\n\n      if (data.length > 0) {\n        setValues((prevValues) => {\n          let newValArr = [...prevValues];\n          data.forEach(({ city, aqi }) => {\n            let index = findIndex(newValArr, { city });\n            if (index < 0) {\n              newValArr.push({ city, aqi, updated });\n            } else {\n              newValArr[index].aqi = aqi;\n              newValArr[index].updated = updated;\n            }\n          });\n          return [...newValArr];\n        });\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <main className=\"py-5\">\n        <div className=\"mb-3 text-center\">\n          <h2>Live Air Quality Monitoring</h2>\n        </div>\n        {values.length ? (\n          <>\n            <Table values={[...values]} />\n            <Chart values={[...values]} />\n          </>\n        ) : (\n          <div className=\"d-flex justify-content-center py-5\">\n            <div className=\"spinner-border\" role=\"status\">\n              <span className=\"visually-hidden\">Loading...</span>\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}